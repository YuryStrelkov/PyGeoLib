from ..Curves.bezier import BEZIER_CIRCLE_POINTS, BEZIER_ANCHOR_VAL
from .bevel_shape import BevelShape
from ...Transformations import Transform3d
from ...Vectors import Vector3, Vector2
from .bezier_patch import BezierPatch
from .sphere import Sphere
from .shape import Shape
from .helix import Helix
from .torus import Torus
from typing import Tuple

PATCH_CONTROL_POINTS = (Vector3(-0.5, 0, -0.5),
                        Vector3(-0.1666, 0.0, -0.5),
                        Vector3(0.1666, 0.0, -0.5),
                        Vector3(0.5, 0.0, -0.5),
                        Vector3(-0.5, 0.0, -0.1666),
                        Vector3(-0.1666, 0.0, -0.1666),
                        Vector3(0.1666, 0.0, -0.1666),
                        Vector3(0.5, 0.0, -0.1666),
                        Vector3(-0.5, 0.0, 0.1666),
                        Vector3(-0.1666, 0.0, 0.1666),
                        Vector3(0.1666, 0.0, 0.1666),
                        Vector3(0.5, 0.0, 0.1666),
                        Vector3(-0.5, 0.0, 0.5),
                        Vector3(-0.1666, 0.0, 0.5),
                        Vector3(0.1666, 0.0, 0.5),
                        Vector3(0.5, 0.0, 0.5))


def spring_shape(radius1: float = 0.075, radius2: float = 1.0, radius3: float = 0.5,
                 height: float = 1.75, turns: float = 5.0, resolution=(256, 16)) -> Tuple[Shape, ...]:
    helix: Helix = Helix(radius1, radius2, height, turns)
    torus1: Helix = Helix(radius1, radius3, -0.075, -0.5)
    torus2: Helix = Helix(radius1, radius3, 0.075, 0.5)
    torus1.transform.transform_matrix = helix.basis_start
    torus2.transform.transform_matrix = helix.basis_end
    torus3: Torus = Torus(radius1, radius3, 0.8)
    torus4: Torus = Torus(radius1, radius3, -0.8)
    torus3.transform.transform_matrix = torus2.basis_end
    torus3.transform.angles += Vector3(0.0, 90.0, 0.0)
    torus4.transform.transform_matrix = torus1.basis_end
    torus4.transform.angles += Vector3(0.0, -90.0, 0.0)
    total_l = helix.length + torus1.length + torus2.length + torus3.length + torus4.length
    helix.resolution = (int(helix.length / total_l * resolution[0]), resolution[1])
    torus1.resolution = (int(torus1.length / total_l * resolution[0]), resolution[1])
    torus2.resolution = (int(torus2.length / total_l * resolution[0]), resolution[1])
    torus3.resolution = (int(torus3.length / total_l * resolution[0]), resolution[1])
    torus4.resolution = (int(torus4.length / total_l * resolution[0]), resolution[1])
    return helix, torus1, torus2, torus3, torus4


def box_shape(radius: float = 1.0) -> Tuple['BezierPatch', ...]:
    side = tuple(Vector3(p.x, 0.5, p.z) * radius for p in PATCH_CONTROL_POINTS)
    path_side_up = BezierPatch(side)
    transform = Transform3d()
    transform.angles = Vector3(180.0, 0.0, 0.0)
    path_side_down = BezierPatch(tuple(transform.transform_vect(v, 1.0) for v in side))
    transform.angles = Vector3(90.0, 0.0, 0.0)
    path_side_front = BezierPatch(tuple(transform.transform_vect(v, 1.0) for v in side))
    transform.angles = Vector3(-90.0, 0.0, 0.0)
    path_side_back = BezierPatch(tuple(transform.transform_vect(v, 1.0) for v in side))
    transform.angles = Vector3(0.0, 0.0, 90.0)
    path_side_left = BezierPatch(tuple(transform.transform_vect(v, 1.0) for v in side))
    transform.angles = Vector3(0.0, 0.0, -90.0)
    path_side_right = BezierPatch(tuple(transform.transform_vect(v, 1.0) for v in side))

    path_side_up.resolution = (3, 3)
    path_side_down.resolution = (3, 3)
    path_side_front.resolution = (3, 3)
    path_side_back.resolution = (3, 3)
    path_side_left.resolution = (3, 3)
    path_side_right.resolution = (3, 3)

    return path_side_up, path_side_down, path_side_front, path_side_back, path_side_left, path_side_right


def sphere_shape(radius: float = 1.0) -> Tuple['Shape', ...]:
    return Sphere(radius=radius, uv0=Vector2(0, 0), uv1=Vector2(0.5, 0.5)), \
           Sphere(radius=radius, uv0=Vector2(0.5, 0.5), uv1=Vector2(1.0, 1.0)), \
           Sphere(radius=radius, uv0=Vector2(0.0, 0.5), uv1=Vector2(0.5, 1.0)), \
           Sphere(radius=radius, uv0=Vector2(0.5, 0.0), uv1=Vector2(1.0, 0.5))


def cylinder_shape(radius1: float = 1.0, radius2: float = 1.0, height: float = 1.0) -> Shape:
    return BevelShape(tuple(p * radius1 for p in BEZIER_CIRCLE_POINTS),
                      (Vector3(0.0, 0.0, 0.0), Vector3(0.0, 0.0, 0.5 * BEZIER_ANCHOR_VAL * height),
                       Vector3(0.0, 0.0, (1.0 - 0.5 * BEZIER_ANCHOR_VAL) * height), Vector3(0.0, 0.0, height)),
                      tuple(p * radius2 for p in BEZIER_CIRCLE_POINTS))


UTAH_TEAPOT_CONTROL_POINTS = \
    (Vector3(1.4, 0.0, 2.4),
     Vector3(1.4, -0.784, 2.4),
     Vector3(0.784, -1.4, 2.4),
     Vector3(0.0, -1.4, 2.4),
     Vector3(1.3375, 0.0, 2.53125),
     Vector3(1.3375, -0.749, 2.53125),
     Vector3(0.749, -1.3375, 2.53125),
     Vector3(0.0, -1.3375, 2.53125),
     Vector3(1.4375, 0.0, 2.53125),
     Vector3(1.4375, -0.805, 2.53125),
     Vector3(0.805, -1.4375, 2.53125),
     Vector3(0.0, -1.4375, 2.53125),
     Vector3(1.5, 0.0, 2.4),
     Vector3(1.5, -0.84, 2.4),
     Vector3(0.84, -1.5, 2.4),
     Vector3(0.0, -1.5, 2.4),
     Vector3(0.0, -1.4, 2.4),
     Vector3(-0.784, -1.4, 2.4),
     Vector3(-1.4, -0.784, 2.4),
     Vector3(-1.4, 0.0, 2.4),
     Vector3(0.0, -1.3375, 2.53125),
     Vector3(-0.749, -1.3375, 2.53125),
     Vector3(-1.3375, -0.749, 2.53125),
     Vector3(-1.3375, 0.0, 2.53125),
     Vector3(0.0, -1.4375, 2.53125),
     Vector3(-0.805, -1.4375, 2.53125),
     Vector3(-1.4375, -0.805, 2.53125),
     Vector3(-1.4375, 0.0, 2.53125),
     Vector3(0.0, -1.5, 2.4),
     Vector3(-0.84, -1.5, 2.4),
     Vector3(-1.5, -0.84, 2.4),
     Vector3(-1.5, 0.0, 2.4),
     Vector3(-1.4, 0.0, 2.4),
     Vector3(-1.4, 0.784, 2.4),
     Vector3(-0.784, 1.4, 2.4),
     Vector3(0.0, 1.4, 2.4),
     Vector3(-1.3375, 0.0, 2.53125),
     Vector3(-1.3375, 0.749, 2.53125),
     Vector3(-0.749, 1.3375, 2.53125),
     Vector3(0.0, 1.3375, 2.53125),
     Vector3(-1.4375, 0.0, 2.53125),
     Vector3(-1.4375, 0.805, 2.53125),
     Vector3(-0.805, 1.4375, 2.53125),
     Vector3(0.0, 1.4375, 2.53125),
     Vector3(-1.5, 0.0, 2.4),
     Vector3(-1.5, 0.84, 2.4),
     Vector3(-0.84, 1.5, 2.4),
     Vector3(0.0, 1.5, 2.4),
     Vector3(0.0, 1.4, 2.4),
     Vector3(0.784, 1.4, 2.4),
     Vector3(1.4, 0.784, 2.4),
     Vector3(1.4, 0.0, 2.4),
     Vector3(0.0, 1.3375, 2.53125),
     Vector3(0.749, 1.3375, 2.53125),
     Vector3(1.3375, 0.749, 2.53125),
     Vector3(1.3375, 0.0, 2.53125),
     Vector3(0.0, 1.4375, 2.53125),
     Vector3(0.805, 1.4375, 2.53125),
     Vector3(1.4375, 0.805, 2.53125),
     Vector3(1.4375, 0.0, 2.53125),
     Vector3(0.0, 1.5, 2.4),
     Vector3(0.84, 1.5, 2.4),
     Vector3(1.5, 0.84, 2.4),
     Vector3(1.5, 0.0, 2.4),
     Vector3(1.5, 0.0, 2.4),
     Vector3(1.5, -0.84, 2.4),
     Vector3(0.84, -1.5, 2.4),
     Vector3(0.0, -1.5, 2.4),
     Vector3(1.75, 0.0, 1.875),
     Vector3(1.75, -0.98, 1.875),
     Vector3(0.98, -1.75, 1.875),
     Vector3(0.0, -1.75, 1.875),
     Vector3(2.0, 0.0, 1.35),
     Vector3(2.0, -1.12, 1.35),
     Vector3(1.12, -2.0, 1.35),
     Vector3(0.0, -2.0, 1.35),
     Vector3(2.0, 0.0, 0.9),
     Vector3(2.0, -1.12, 0.9),
     Vector3(1.12, -2.0, 0.9),
     Vector3(0.0, -2.0, 0.9),
     Vector3(0.0, -1.5, 2.4),
     Vector3(-0.84, -1.5, 2.4),
     Vector3(-1.5, -0.84, 2.4),
     Vector3(-1.5, 0.0, 2.4),
     Vector3(0.0, -1.75, 1.875),
     Vector3(-0.98, -1.75, 1.875),
     Vector3(-1.75, -0.98, 1.875),
     Vector3(-1.75, 0.0, 1.875),
     Vector3(0.0, -2.0, 1.35),
     Vector3(-1.12, -2.0, 1.35),
     Vector3(-2.0, -1.12, 1.35),
     Vector3(-2.0, 0.0, 1.35),
     Vector3(0.0, -2.0, 0.9),
     Vector3(-1.12, -2.0, 0.9),
     Vector3(-2.0, -1.12, 0.9),
     Vector3(-2.0, 0.0, 0.9),
     Vector3(-1.5, 0.0, 2.4),
     Vector3(-1.5, 0.84, 2.4),
     Vector3(-0.84, 1.5, 2.4),
     Vector3(0.0, 1.5, 2.4),
     Vector3(-1.75, 0.0, 1.875),
     Vector3(-1.75, 0.98, 1.875),
     Vector3(-0.98, 1.75, 1.875),
     Vector3(0.0, 1.75, 1.875),
     Vector3(-2.0, 0.0, 1.35),
     Vector3(-2.0, 1.12, 1.35),
     Vector3(-1.12, 2.0, 1.35),
     Vector3(0.0, 2.0, 1.35),
     Vector3(-2.0, 0.0, 0.9),
     Vector3(-2.0, 1.12, 0.9),
     Vector3(-1.12, 2.0, 0.9),
     Vector3(0.0, 2.0, 0.9),
     Vector3(0.0, 1.5, 2.4),
     Vector3(0.84, 1.5, 2.4),
     Vector3(1.5, 0.84, 2.4),
     Vector3(1.5, 0.0, 2.4),
     Vector3(0.0, 1.75, 1.875),
     Vector3(0.98, 1.75, 1.875),
     Vector3(1.75, 0.98, 1.875),
     Vector3(1.75, 0.0, 1.875),
     Vector3(0.0, 2.0, 1.35),
     Vector3(1.12, 2.0, 1.35),
     Vector3(2.0, 1.12, 1.35),
     Vector3(2.0, 0.0, 1.35),
     Vector3(0.0, 2.0, 0.9),
     Vector3(1.12, 2.0, 0.9),
     Vector3(2.0, 1.12, 0.9),
     Vector3(2.0, 0.0, 0.9),
     Vector3(2.0, 0.0, 0.9),
     Vector3(2.0, -1.12, 0.9),
     Vector3(1.12, -2.0, 0.9),
     Vector3(0.0, -2.0, 0.9),
     Vector3(2.0, 0.0, 0.45),
     Vector3(2.0, -1.12, 0.45),
     Vector3(1.12, -2.0, 0.45),
     Vector3(0.0, -2.0, 0.45),
     Vector3(1.5, 0.0, 0.225),
     Vector3(1.5, -0.84, 0.225),
     Vector3(0.84, -1.5, 0.225),
     Vector3(0.0, -1.5, 0.225),
     Vector3(1.5, 0.0, 0.15),
     Vector3(1.5, -0.84, 0.15),
     Vector3(0.84, -1.5, 0.15),
     Vector3(0.0, -1.5, 0.15),
     Vector3(0.0, -2.0, 0.9),
     Vector3(-1.12, -2.0, 0.9),
     Vector3(-2.0, -1.12, 0.9),
     Vector3(-2.0, 0.0, 0.9),
     Vector3(0.0, -2.0, 0.45),
     Vector3(-1.12, -2.0, 0.45),
     Vector3(-2.0, -1.12, 0.45),
     Vector3(-2.0, 0.0, 0.45),
     Vector3(0.0, -1.5, 0.225),
     Vector3(-0.84, -1.5, 0.225),
     Vector3(-1.5, -0.84, 0.225),
     Vector3(-1.5, 0.0, 0.225),
     Vector3(0.0, -1.5, 0.15),
     Vector3(-0.84, -1.5, 0.15),
     Vector3(-1.5, -0.84, 0.15),
     Vector3(-1.5, 0.0, 0.15),
     Vector3(-2.0, 0.0, 0.9),
     Vector3(-2.0, 1.12, 0.9),
     Vector3(-1.12, 2.0, 0.9),
     Vector3(0.0, 2.0, 0.9),
     Vector3(-2.0, 0.0, 0.45),
     Vector3(-2.0, 1.12, 0.45),
     Vector3(-1.12, 2.0, 0.45),
     Vector3(0.0, 2.0, 0.45),
     Vector3(-1.5, 0.0, 0.225),
     Vector3(-1.5, 0.84, 0.225),
     Vector3(-0.84, 1.5, 0.225),
     Vector3(0.0, 1.5, 0.225),
     Vector3(-1.5, 0.0, 0.15),
     Vector3(-1.5, 0.84, 0.15),
     Vector3(-0.84, 1.5, 0.15),
     Vector3(0.0, 1.5, 0.15),
     Vector3(0.0, 2.0, 0.9),
     Vector3(1.12, 2.0, 0.9),
     Vector3(2.0, 1.12, 0.9),
     Vector3(2.0, 0.0, 0.9),
     Vector3(0.0, 2.0, 0.45),
     Vector3(1.12, 2.0, 0.45),
     Vector3(2.0, 1.12, 0.45),
     Vector3(2.0, 0.0, 0.45),
     Vector3(0.0, 1.5, 0.225),
     Vector3(0.84, 1.5, 0.225),
     Vector3(1.5, 0.84, 0.225),
     Vector3(1.5, 0.0, 0.225),
     Vector3(0.0, 1.5, 0.15),
     Vector3(0.84, 1.5, 0.15),
     Vector3(1.5, 0.84, 0.15),
     Vector3(1.5, 0.0, 0.15),
     Vector3(-1.6, 0.0, 2.025),
     Vector3(-1.6, -0.3, 2.025),
     Vector3(-1.5, -0.3, 2.25),
     Vector3(-1.5, 0.0, 2.25),
     Vector3(-2.3, 0.0, 2.025),
     Vector3(-2.3, -0.3, 2.025),
     Vector3(-2.5, -0.3, 2.25),
     Vector3(-2.5, 0.0, 2.25),
     Vector3(-2.7, 0.0, 2.025),
     Vector3(-2.7, -0.3, 2.025),
     Vector3(-3.0, -0.3, 2.25),
     Vector3(-3.0, 0.0, 2.25),
     Vector3(-2.7, 0.0, 1.8),
     Vector3(-2.7, -0.3, 1.8),
     Vector3(-3.0, -0.3, 1.8),
     Vector3(-3.0, 0.0, 1.8),
     Vector3(-1.5, 0.0, 2.25),
     Vector3(-1.5, 0.3, 2.25),
     Vector3(-1.6, 0.3, 2.025),
     Vector3(-1.6, 0.0, 2.025),
     Vector3(-2.5, 0.0, 2.25),
     Vector3(-2.5, 0.3, 2.25),
     Vector3(-2.3, 0.3, 2.025),
     Vector3(-2.3, 0.0, 2.025),
     Vector3(-3.0, 0.0, 2.25),
     Vector3(-3.0, 0.3, 2.25),
     Vector3(-2.7, 0.3, 2.025),
     Vector3(-2.7, 0.0, 2.025),
     Vector3(-3.0, 0.0, 1.8),
     Vector3(-3.0, 0.3, 1.8),
     Vector3(-2.7, 0.3, 1.8),
     Vector3(-2.7, 0.0, 1.8),
     Vector3(-2.7, 0.0, 1.8),
     Vector3(-2.7, -0.3, 1.8),
     Vector3(-3.0, -0.3, 1.8),
     Vector3(-3.0, 0.0, 1.8),
     Vector3(-2.7, 0.0, 1.575),
     Vector3(-2.7, -0.3, 1.575),
     Vector3(-3.0, -0.3, 1.35),
     Vector3(-3.0, 0.0, 1.35),
     Vector3(-2.5, 0.0, 1.125),
     Vector3(-2.5, -0.3, 1.125),
     Vector3(-2.65, -0.3, 0.9375),
     Vector3(-2.65, 0.0, 0.9375),
     Vector3(-2.0, 0.0, 0.9),
     Vector3(-2.0, -0.3, 0.9),
     Vector3(-1.9, -0.3, 0.6),
     Vector3(-1.9, 0.0, 0.6),
     Vector3(-3.0, 0.0, 1.8),
     Vector3(-3.0, 0.3, 1.8),
     Vector3(-2.7, 0.3, 1.8),
     Vector3(-2.7, 0.0, 1.8),
     Vector3(-3.0, 0.0, 1.35),
     Vector3(-3.0, 0.3, 1.35),
     Vector3(-2.7, 0.3, 1.575),
     Vector3(-2.7, 0.0, 1.575),
     Vector3(-2.65, 0.0, 0.9375),
     Vector3(-2.65, 0.3, 0.9375),
     Vector3(-2.5, 0.3, 1.125),
     Vector3(-2.5, 0.0, 1.125),
     Vector3(-1.9, 0.0, 0.6),
     Vector3(-1.9, 0.3, 0.6),
     Vector3(-2.0, 0.3, 0.9),
     Vector3(-2.0, 0.0, 0.9),
     Vector3(1.7, 0.0, 1.425),
     Vector3(1.7, -0.66, 1.425),
     Vector3(1.7, -0.66, 0.6),
     Vector3(1.7, 0.0, 0.6),
     Vector3(2.6, 0.0, 1.425),
     Vector3(2.6, -0.66, 1.425),
     Vector3(3.1, -0.66, 0.825),
     Vector3(3.1, 0.0, 0.825),
     Vector3(2.3, 0.0, 2.1),
     Vector3(2.3, -0.25, 2.1),
     Vector3(2.4, -0.25, 2.025),
     Vector3(2.4, 0.0, 2.025),
     Vector3(2.7, 0.0, 2.4),
     Vector3(2.7, -0.25, 2.4),
     Vector3(3.3, -0.25, 2.4),
     Vector3(3.3, 0.0, 2.4),
     Vector3(1.7, 0.0, 0.6),
     Vector3(1.7, 0.66, 0.6),
     Vector3(1.7, 0.66, 1.425),
     Vector3(1.7, 0.0, 1.425),
     Vector3(3.1, 0.0, 0.825),
     Vector3(3.1, 0.66, 0.825),
     Vector3(2.6, 0.66, 1.425),
     Vector3(2.6, 0.0, 1.425),
     Vector3(2.4, 0.0, 2.025),
     Vector3(2.4, 0.25, 2.025),
     Vector3(2.3, 0.25, 2.1),
     Vector3(2.3, 0.0, 2.1),
     Vector3(3.3, 0.0, 2.4),
     Vector3(3.3, 0.25, 2.4),
     Vector3(2.7, 0.25, 2.4),
     Vector3(2.7, 0.0, 2.4),
     Vector3(2.7, 0.0, 2.4),
     Vector3(2.7, -0.25, 2.4),
     Vector3(3.3, -0.25, 2.4),
     Vector3(3.3, 0.0, 2.4),
     Vector3(2.8, 0.0, 2.475),
     Vector3(2.8, -0.25, 2.475),
     Vector3(3.525, -0.25, 2.49375),
     Vector3(3.525, 0.0, 2.49375),
     Vector3(2.9, 0.0, 2.475),
     Vector3(2.9, -0.15, 2.475),
     Vector3(3.45, -0.15, 2.5125),
     Vector3(3.45, 0.0, 2.5125),
     Vector3(2.8, 0.0, 2.4),
     Vector3(2.8, -0.15, 2.4),
     Vector3(3.2, -0.15, 2.4),
     Vector3(3.2, 0.0, 2.4),
     Vector3(3.3, 0.0, 2.4),
     Vector3(3.3, 0.25, 2.4),
     Vector3(2.7, 0.25, 2.4),
     Vector3(2.7, 0.0, 2.4),
     Vector3(3.525, 0.0, 2.49375),
     Vector3(3.525, 0.25, 2.49375),
     Vector3(2.8, 0.25, 2.475),
     Vector3(2.8, 0.0, 2.475),
     Vector3(3.45, 0.0, 2.5125),
     Vector3(3.45, 0.15, 2.5125),
     Vector3(2.9, 0.15, 2.475),
     Vector3(2.9, 0.0, 2.475),
     Vector3(3.2, 0.0, 2.4),
     Vector3(3.2, 0.15, 2.4),
     Vector3(2.8, 0.15, 2.4),
     Vector3(2.8, 0.0, 2.4),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.8, 0.0, 3.15),
     Vector3(0.8, -0.45, 3.15),
     Vector3(0.45, -0.8, 3.15),
     Vector3(0.0, -0.8, 3.15),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.2, 0.0, 2.7),
     Vector3(0.2, -0.112, 2.7),
     Vector3(0.112, -0.2, 2.7),
     Vector3(0.0, -0.2, 2.7),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, -0.8, 3.15),
     Vector3(-0.45, -0.8, 3.15),
     Vector3(-0.8, -0.45, 3.15),
     Vector3(-0.8, 0.0, 3.15),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, -0.2, 2.7),
     Vector3(-0.112, -0.2, 2.7),
     Vector3(-0.2, -0.112, 2.7),
     Vector3(-0.2, 0.0, 2.7),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.0, 3.15),
     Vector3(-0.8, 0.0, 3.15),
     Vector3(-0.8, 0.45, 3.15),
     Vector3(-0.45, 0.8, 3.15),
     Vector3(0.0, 0.8, 3.15),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.0, 2.85),
     Vector3(-0.2, 0.0, 2.7),
     Vector3(-0.2, 0.112, 2.7),
     Vector3(-0.112, 0.2, 2.7),
     Vector3(0.0, 0.2, 2.7),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.0, 3.15),
     Vector3(0.0, 0.8, 3.15),
     Vector3(0.45, 0.8, 3.15),
     Vector3(0.8, 0.45, 3.15),
     Vector3(0.8, 0.0, 3.15),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.0, 2.85),
     Vector3(0.0, 0.2, 2.7),
     Vector3(0.112, 0.2, 2.7),
     Vector3(0.2, 0.112, 2.7),
     Vector3(0.2, 0.0, 2.7),
     Vector3(0.2, 0.0, 2.7),
     Vector3(0.2, -0.112, 2.7),
     Vector3(0.112, -0.2, 2.7),
     Vector3(0.0, -0.2, 2.7),
     Vector3(0.4, 0.0, 2.55),
     Vector3(0.4, -0.224, 2.55),
     Vector3(0.224, -0.4, 2.55),
     Vector3(0.0, -0.4, 2.55),
     Vector3(1.3, 0.0, 2.55),
     Vector3(1.3, -0.728, 2.55),
     Vector3(0.728, -1.3, 2.55),
     Vector3(0.0, -1.3, 2.55),
     Vector3(1.3, 0.0, 2.4),
     Vector3(1.3, -0.728, 2.4),
     Vector3(0.728, -1.3, 2.4),
     Vector3(0.0, -1.3, 2.4),
     Vector3(0.0, -0.2, 2.7),
     Vector3(-0.112, -0.2, 2.7),
     Vector3(-0.2, -0.112, 2.7),
     Vector3(-0.2, 0.0, 2.7),
     Vector3(0.0, -0.4, 2.55),
     Vector3(-0.224, -0.4, 2.55),
     Vector3(-0.4, -0.224, 2.55),
     Vector3(-0.4, 0.0, 2.55),
     Vector3(0.0, -1.3, 2.55),
     Vector3(-0.728, -1.3, 2.55),
     Vector3(-1.3, -0.728, 2.55),
     Vector3(-1.3, 0.0, 2.55),
     Vector3(0.0, -1.3, 2.4),
     Vector3(-0.728, -1.3, 2.4),
     Vector3(-1.3, -0.728, 2.4),
     Vector3(-1.3, 0.0, 2.4),
     Vector3(-0.2, 0.0, 2.7),
     Vector3(-0.2, 0.112, 2.7),
     Vector3(-0.112, 0.2, 2.7),
     Vector3(0.0, 0.2, 2.7),
     Vector3(-0.4, 0.0, 2.55),
     Vector3(-0.4, 0.224, 2.55),
     Vector3(-0.224, 0.4, 2.55),
     Vector3(0.0, 0.4, 2.55),
     Vector3(-1.3, 0.0, 2.55),
     Vector3(-1.3, 0.728, 2.55),
     Vector3(-0.728, 1.3, 2.55),
     Vector3(0.0, 1.3, 2.55),
     Vector3(-1.3, 0.0, 2.4),
     Vector3(-1.3, 0.728, 2.4),
     Vector3(-0.728, 1.3, 2.4),
     Vector3(0.0, 1.3, 2.4),
     Vector3(0.0, 0.2, 2.7),
     Vector3(0.112, 0.2, 2.7),
     Vector3(0.2, 0.112, 2.7),
     Vector3(0.2, 0.0, 2.7),
     Vector3(0.0, 0.4, 2.55),
     Vector3(0.224, 0.4, 2.55),
     Vector3(0.4, 0.224, 2.55),
     Vector3(0.4, 0.0, 2.55),
     Vector3(0.0, 1.3, 2.55),
     Vector3(0.728, 1.3, 2.55),
     Vector3(1.3, 0.728, 2.55),
     Vector3(1.3, 0.0, 2.55),
     Vector3(0.0, 1.3, 2.4),
     Vector3(0.728, 1.3, 2.4),
     Vector3(1.3, 0.728, 2.4),
     Vector3(1.3, 0.0, 2.4),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 0.0, 0.0),
     Vector3(1.425, 0.0, 0.0),
     Vector3(1.425, 0.798, 0.0),
     Vector3(0.798, 1.425, 0.0),
     Vector3(0.0, 1.425, 0.0),
     Vector3(1.5, 0.0, 0.075),
     Vector3(1.5, 0.84, 0.075),
     Vector3(0.84, 1.5, 0.075),
     Vector3(0.0, 1.5, 0.075),
     Vector3(1.5, 0.0, 0.15),
     Vector3(1.5, 0.84, 0.15),
     Vector3(0.84, 1.5, 0.15),
     Vector3(0.0, 1.5, 0.15),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 1.425, 0.0),
     Vector3(-0.798, 1.425, 0.0),
     Vector3(-1.425, 0.798, 0.0),
     Vector3(-1.425, 0.0, 0.0),
     Vector3(0.0, 1.5, 0.075),
     Vector3(-0.84, 1.5, 0.075),
     Vector3(-1.5, 0.84, 0.075),
     Vector3(-1.5, 0.0, 0.075),
     Vector3(0.0, 1.5, 0.15),
     Vector3(-0.84, 1.5, 0.15),
     Vector3(-1.5, 0.84, 0.15),
     Vector3(-1.5, 0.0, 0.15),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 0.0, 0.0),
     Vector3(-1.425, 0.0, 0.0),
     Vector3(-1.425, -0.798, 0.0),
     Vector3(-0.798, -1.425, 0.0),
     Vector3(0.0, -1.425, 0.0),
     Vector3(-1.5, 0.0, 0.075),
     Vector3(-1.5, -0.84, 0.075),
     Vector3(-0.84, -1.5, 0.075),
     Vector3(0.0, -1.5, 0.075),
     Vector3(-1.5, 0.0, 0.15),
     Vector3(-1.5, -0.84, 0.15),
     Vector3(-0.84, -1.5, 0.15),
     Vector3(0.0, -1.5, 0.15),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, 0.0, 0.0),
     Vector3(0.0, -1.425, 0.0),
     Vector3(0.798, -1.425, 0.0),
     Vector3(1.425, -0.798, 0.0),
     Vector3(1.425, 0.0, 0.0),
     Vector3(0.0, -1.5, 0.075),
     Vector3(0.84, -1.5, 0.075),
     Vector3(1.5, -0.84, 0.075),
     Vector3(1.5, 0.0, 0.075),
     Vector3(0.0, -1.5, 0.15),
     Vector3(0.84, -1.5, 0.15),
     Vector3(1.5, -0.84, 0.15),
     Vector3(1.5, 0.0, 0.15))


def utah_teapot_shape() -> Tuple[BezierPatch, ...]:
    points = UTAH_TEAPOT_CONTROL_POINTS
    return tuple(BezierPatch(points[idx * 16: (idx + 1) * 16]) for idx in range(len(points) // 16))
